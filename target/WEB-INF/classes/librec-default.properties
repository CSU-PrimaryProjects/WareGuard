# set data directory 用于设置数据集读取路径
dfs.data.dir=../data
# set result directory 用于设置推荐结果的保存路径
# recommender result will output in this folder
dfs.result.dir=../result

# convertor
# load data and splitting data 
# into two (or three) set
# setting dataset name
#data.input.path=ml-10M100k/ratings.dat  指定输入的数据集，目录是dfs.data.dir
data.input.path=movielens/ml-100k/ratings.txt
#data.input.path=movielens/ml-1m/ratings.dat
#data.input.path=Gowalla/all.txt
# setting dataset format(UIR, UIRT)
#指定数据集每一列的含义，是user item rating 还是 user item rating time,前者用UIR，后者用UIRT
data.column.format=UIRT

#data.convert.sep = ::
#data.convert.sep = \t
#data.convert.sep =
data.cache = true

# setting method of split data
# value can be ratio, loocv, given, KCV
#设置划分数据集的方式，librec中提供 ratio、loocv、given、kcv等几种划分方式
data.model.splitter=ratio
#data.splitter.cv.number=5
# using rating to split dataset
data.splitter.ratio=rating
# filmtrust dataset is saved by text
# text, arff is accepted
#这里指的是数据集是 text 还是 arff 格式（只有这两种格式），当数据列大于4时，需要使用arff格式的数据来进行存储
data.model.format=text
# the ratio of trainset
# this value should in (0,1)
#选择ratio方式划分需要设定，意思是划分比例，数值在（0,1）之间
data.splitter.trainset.ratio=0.8

# Detailed configuration of loocv, given, KCV 
# is written in User Guide 

# set the random seed for reproducing the results (split data, init parameters and other methods using random)
# default is set 1l
# if do not set ,just use System.currentTimeMillis() as the seed and could not reproduce the results.
#为了保证每次生成的结果是可以复现的，设定全局的随机种子，固定随机种子则固定了诸如初始化参数、每次划分数据集的结果等，
# 设定随机种子可以保证每次运行得到的结果都是一样的（前提是参数不变）
rec.random.seed=1

# binarize threshold mainly used in ranking
# -1.0 - maxRate, binarize rate into -1.0 and 1.0
# binThold = -1.0， do nothing
# binThold = value, rating > value is changed to 1.0 other is 0.0, mainly used in ranking
# for PGM 0.0 maybe a better choose
data.convert.binarize.threshold=-1.0

# evaluation the result or not
rec.eval.enable=true

# specifies evaluators
# rec.eval.classes=auc,precision,recall...
# if rec.eval.class is blank 
# every evaluator will be calculated
# rec.eval.classes=auc,precision,recall

# evaluator value set is written in User Guide
# if this algorithm is ranking only true or false
rec.recommender.isranking=false

#can use user,item,social similarity, default value is user, maximum values:user,item,social
#rec.recommender.similarities=user